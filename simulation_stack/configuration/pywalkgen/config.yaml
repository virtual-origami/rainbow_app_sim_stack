scene:
  render:
      map_render:
        - map_render_1: &map_render_1
            dimensions: [ 800, 1000 ]
            color: [ 255,255,255 ]
            type: "2D"
      obstacle_render:
        - block: &block
            type: "static"
            color: [ 0,0,0 ]
            shape: "polygon"
        - wall: &wall
            type: "static"
            color: [ 0,0,0 ]
            shape: "line"
      robot_render:
        - robot_1: &robot_1
            color: [ 0,0,0 ]
            base_width: 10
            joint_width: 5
            arm_width: 8
      particle_render:
        - particle_1: &particle_1
            color: [ 255,0,0 ]
            size: 5
      attributes: &attributes
          scaling: 5
          interval: 0.1
  obstacles_placement_1: &obstacles_placement_1
    - id: '1'
      description: "wall-1"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 10,10 ]
        - [ 160,10 ]
    - id: '2'
      description: "wall-2"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 160,10 ]
        - [ 160,160 ]
    - id: '3'
      description: "wall-3"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 160,160 ]
        - [ 10,160 ]
    - id: '4'
      description: "wall-4"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 10,160 ]
        - [ 10,10 ]
    - id: '5'
      description: "wall-5"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 60,10 ]
        - [ 60,30 ]
    - id: '6'
      description: "wall-6"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,10 ]
        - [ 100,30 ]
    - id: '7'
      description: "wall-7"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 60,80 ]
        - [ 60,110 ]
    - id: '8'
      description: "wall-8"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 60,130 ]
        - [ 60,160 ]
    - id: '9'
      description: "wall-9"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,10 ]
        - [ 100,30 ]
    - id: '10'
      description: "wall-10"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,50 ]
        - [ 100,110 ]
    - id: '11'
      description: "wall-11"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,130 ]
        - [ 100,160 ]
    - id: '12'
      description: "wall-12"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 10,80 ]
        - [ 60,80 ]
    - id: '13'
      description: "wall-13"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,80 ]
        - [ 160,80 ]
    - id: '14'
      description: "wall-14"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 60,50 ]
        - [ 60,80 ]
  obstacles_placement_2: &obstacles_placement_2
    - id: '1'
      description: "wall-1"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 10,10 ]
        - [ 100,10 ]
    - id: '2'
      description: "wall-2"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,10 ]
        - [ 100,100 ]
    - id: '3'
      description: "wall-3"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 100,100 ]
        - [ 10,100 ]
    - id: '4'
      description: "wall-4"
      render: *wall
      attributes: *attributes
      width: 8
      points:
        - [ 10,100 ]
        - [ 10,10 ]
  robots_placement_1: &robots_placement_1
    - id: "1"
      render: *robot_1
      attributes: *attributes
      base:
        coordinate: { x: 35.0, y: 50.0 }
        size: 4
    - id: "2"
      render: *robot_1
      attributes: *attributes
      base:
        coordinate: { x: 130.0, y: 120.0 }
        size: 4
#    - id: "3"
#      render: *robot_1
#      attributes: *attributes
#      base:
#        coordinate: { x: 130.0, y: 50.0 }
#        size: 4
#    - id: "4"
#      render: *robot_1
#      attributes: *attributes
#      base:
#        coordinate: { x: 35.0, y: 120.0 }
#        size: 4
  robots_placement_2: &robots_placement_2
    - id: "1"
      render: *robot_1
      attributes: *attributes
      base: { x: 20.0, y: 20.0 }
    - id: "2"
      render: *robot_1
      attributes: *attributes
      base: { x: 50.0, y: 50.0 }
    - id: "3"
      render: *robot_1
      attributes: *attributes
      base: { x: 80.0, y: 20.0 }
  areas_division_1: &areas_division_1
    - id: 1
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 10,10 ]
          - [ 85,10 ]
          - [ 85,85 ]
          - [ 10,85 ]
    - id: 2
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 85,10 ]
          - [ 160,10 ]
          - [ 160,85 ]
          - [ 85,85 ]
    - id: 3
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 10,85 ]
          - [ 85,85 ]
          - [ 85,160 ]
          - [ 10,160 ]
    - id: 4
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 85,85 ]
          - [ 160,85 ]
          - [ 160,160 ]
          - [ 85,160 ]
  areas_division_2: &areas_division_2
    - id: 1
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 10,10 ]
          - [ 45,10 ]
          - [ 45, 45 ]
          - [ 10,45 ]
    - id: 2
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 45,10 ]
          - [ 100,10 ]
          - [ 100, 45 ]
          - [ 45,45 ]
    - id: 3
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 10,45 ]
          - [ 45,45 ]
          - [ 45, 100 ]
          - [ 10,100 ]
    - id: 4
      boundary:
        colour: [ 255,255,0 ]
        alpha: 0.3
        coordinates:
          - [ 45,45 ]
          - [ 100,45 ]
          - [ 100, 100 ]
          - [ 45,100 ]
  maps:
    - map_1: &map_1
        id: 1
        render: *map_render_1
        obstacles: *obstacles_placement_1
        robots: *robots_placement_1
        area_division: *areas_division_1
preset:
  amq: # AMQP Broker Information
    broker: &amq_connect_info
      address: "localhost"
      port: 5672
    credentials: &amq_credential
      username: "admin"
      password: "rabbit"
  redis: &redis_connect_info
    server:
      address: "localhost"
      port: 6379
    credentials:
      password: "rabbit"
  pub_sub:
    - pub_sub_1: &pub_generator_personnel
        type: "amq"
        broker: *amq_connect_info
        credential: *amq_credential
        exchange: "generator_personnel"
        queue: "generator_personnel_rk"
        handler:
    - pub_sub_2: &sub_visual
        type: "amq"
        broker: *amq_connect_info
        credential: *amq_credential
        exchange: "visual"
        queue: "visual_generator_robot_rk"
        handler: "robot_msg_handler"
  protocols:
    - protocol_1: &protocol_1
        publishers:
          - *pub_generator_personnel
        subscribers:
          - *sub_visual
  algorithm_attributes:
    rakf:
      rakf_1: &rakf_1
        type: 'rakf'
        track_dimension: 3
        model:
          type: "uwb_imu"     #type can be of   1. "uwb_imu"    2. "uwb"
          coefficient: { x: 1, y: 1, z: 1 }
        error:
          model: { x: 1, y: 1, z: 1 }
          measurement: { x: 1, y: 1, z: 1 }
          state_error_variance: { x: 10, y: 10, z: 10 }
        threshold:
          residual: { x: 1.5, y: 1.5, z: 1.5 } # C (outer circle)
          adaptive: { x: 1, y: 1, z: 1 } # C0 (Inner Circle)
          gamma: { x: 50, y: 50, z: 50 }
        estimator:
          parameter:
            count: 10
        interval: 0.05
      rakf_2: &rakf_2
        type: 'rakf'
        track_dimension: 3
        model:
          type: "uwb"     #type can be of   1. "uwb_imu"    2. "uwb"
          coefficient: { x: 1, y: 1, z: 1 }
        error:
          model: { x: 1, y: 1, z: 1 }
          measurement: { x: 0.5, y: 0.5, z: 0.5 }
          state_error_variance: { x: 1, y: 1, z: 1 }
        threshold:
          residual: { x: 0.5, y: 0.5, z: 0.5 } # C (outer circle)
          adaptive: { x: 0.25, y: 0.25, z: 0.25 } # C0 (Inner Circle)
        estimator:
          parameter:
            count: 10
        interval: 0.1
  attributes:
    walks:
      - walk_1: &walk_1
          enable_collision: True
          max_walk_speed: 10
          direction_factor: 0.5
          distance_factor: 0.7
          angle_deviation_factor: 2
          walk_dimension: 2
          sigmoid_attributes:
            mid_point: 0
            steepness: 0.5
            min_angle: 45
            max_angle: 135
    positionings:
      - positioning_1: &positioning_1
          outliers:
            x:
              mean: 0
              standard_deviation: 2
              number_of_outlier: 20
              sample_size: 100
            y:
              mean: 0
              standard_deviation: 2
              number_of_outlier: 20
              sample_size: 100
            z:
              mean: 0
              standard_deviation: 0.5
              number_of_outlier: 20
              sample_size: 100
    motions:
      - motion_1: &motion_1
          acceleration:
            initial: { x: 0, y: 0, z: 0 }
            outliers:
              x:
                mean: 0
                standard_deviation: 0.1
                number_of_outlier: 50
                sample_size: 100
              y:
                mean: 0
                standard_deviation: 0.1
                number_of_outlier: 50
                sample_size: 100
              z:
                mean: 0
                standard_deviation: 0.1
                number_of_outlier: 50
                sample_size: 100
          velocity:
            initial: { x: 0, y: 0, z: 0 }
          orientation:
            initial: { roll: 0, pitch: 0, yaw: 0 }
    collisions:
      - collision_1: &collision_1
          distance:
            environment: 5
            robot: 10

walk_generator:
  version: "0.1"
  in_mem_db: *redis_connect_info
  sample_interval: 0.5
  personnels:
    - id: '1'
      attribute:
        walk: *walk_1
        positioning: *positioning_1
        motion: *motion_1
        collision: *collision_1
      start_coordinates: { x: 30, y: 50, z: 0}
      map: *map_1
      protocol: *protocol_1
      algorithm: *rakf_1
    - id: '2'
      attribute:
        walk: *walk_1
        positioning: *positioning_1
        motion: *motion_1
        collision: *collision_1
      start_coordinates: { x: 30, y: 50, z: 0}
      map: *map_1
      protocol: *protocol_1
      algorithm: *rakf_1








